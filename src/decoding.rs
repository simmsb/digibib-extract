use encoding_rs::WINDOWS_1252;

pub fn decode_string(data: &[u8], font: u8) -> String {
    if data.len() == 1 {
        match font {
            1 => decode_windings(data),

            2 => decode_symbol(data),

            3 => decode_identity(data),

            _ => decode_vlado(data),
        }
    } else {
        decode_vlado(data)
    }
}

fn decode_vlado(data: &[u8]) -> String {
    let mut out = String::new();
    let mut it = data.iter().copied();

    loop {
        let Some(a) = it.next() else { return out; };

        if a < 32 {
            let Some(b) = it.next() else { return out; };

            out.push(unichar(a, b));
        } else {
            let buf = &[a];
            let (s, _, _) = WINDOWS_1252.decode(buf);
            out.push_str(s.as_ref());
        }
    }
}

fn unichar(a: u8, b: u8) -> char {
    let (a, b) = (a as u16, b as u16);
    let x = b.wrapping_sub(a + 1)
             .wrapping_add(a.wrapping_sub(1) << 8);

    let x = if x < 0x700 {
        x
    } else if x < 0x1100 {
        x + 0x1700
    } else if x < 0x1200 {
        x + 0xe000 - 0x1100
    } else {
        x
    };

    char::decode_utf16([x]).next().unwrap().unwrap()
}

fn decode_identity(data: &[u8]) -> String {
    String::from_utf8_lossy(data).to_string()
}

fn decode_symbol(data: &[u8]) -> String {
    data.iter()
        .copied()
        .filter_map(|x| match x {
            45 => Some('\u{ad}'),
            200 => Some('\u{222a}'),
            x => char::try_from(x).ok(),
        })
        .collect()
}

fn decode_windings(data: &[u8]) -> String {
    let decode_byte = |b: u8| -> char {
        match b {
            32 => '\u{20}',
            33 => '\u{1f589}',
            34 => '\u{2702}',
            35 => '\u{2701}',
            36 => '\u{1f453}',
            37 => '\u{1f56d}',
            38 => '\u{1f56e}',
            39 => '\u{1f56f}',
            40 => '\u{1f57f}',
            41 => '\u{2706}',
            42 => '\u{1f582}',
            43 => '\u{1f583}',
            44 => '\u{1f4ea}',
            45 => '\u{1f4eb}',
            46 => '\u{1f4ec}',
            47 => '\u{1f4ed}',
            48 => '\u{1f5c0}',
            49 => '\u{1f5c1}',
            50 => '\u{1f5ce}',
            51 => '\u{1f5cf}',
            52 => '\u{1f5d0}',
            53 => '\u{1f5c4}',
            54 => '\u{23f3}',
            55 => '\u{1f5ae}',
            56 => '\u{1f5b0}',
            57 => '\u{1f5b2}',
            58 => '\u{1f5b3}',
            59 => '\u{1f5b4}',
            60 => '\u{1f5ab}',
            61 => '\u{1f5ac}',
            62 => '\u{2707}',
            63 => '\u{270d}',
            64 => '\u{1f58e}',
            65 => '\u{270c}',
            66 => '\u{1f58f}',
            67 => '\u{1f44d}',
            68 => '\u{1f44e}',
            69 => '\u{261c}',
            70 => '\u{261e}',
            71 => '\u{261c}',
            72 => '\u{1f597}',
            73 => '\u{1f590}',
            74 => '\u{263a}',
            75 => '\u{1f610}',
            76 => '\u{2639}',
            77 => '\u{1f4a3}',
            78 => '\u{1f571}',
            79 => '\u{1f3f3}',
            80 => '\u{1f3f1}',
            81 => '\u{2708}',
            82 => '\u{263c}',
            83 => '\u{1f322}',
            84 => '\u{2744}',
            85 => '\u{1f546}',
            86 => '\u{271e}',
            87 => '\u{1f548}',
            88 => '\u{2720}',
            89 => '\u{2721}',
            90 => '\u{262a}',
            91 => '\u{262f}',
            92 => '\u{1f549}',
            93 => '\u{2638}',
            94 => '\u{2648}',
            95 => '\u{2649}',
            96 => '\u{264a}',
            97 => '\u{264b}',
            98 => '\u{264c}',
            99 => '\u{264d}',
            100 => '\u{264e}',
            101 => '\u{264f}',
            102 => '\u{2650}',
            103 => '\u{2651}',
            104 => '\u{2652}',
            105 => '\u{2653}',
            106 => '\u{1f670}',
            107 => '\u{1f675}',
            108 => '\u{26ab}',
            109 => '\u{1f53e}',
            110 => '\u{25fc}',
            111 => '\u{1f78f}',
            112 => '\u{1f790}',
            113 => '\u{2751}',
            114 => '\u{2752}',
            115 => '\u{1f79f}',
            116 => '\u{29eb}',
            117 => '\u{25c6}',
            118 => '\u{2756}',
            119 => '\u{1f799}',
            120 => '\u{2327}',
            121 => '\u{2bb9}',
            122 => '\u{2318}',
            123 => '\u{1f3f5}',
            124 => '\u{1f3f6}',
            125 => '\u{1f676}',
            126 => '\u{1f677}',
            // 127 unused
            128 => '\u{1f10b}',
            129 => '\u{2780}',
            130 => '\u{2781}',
            131 => '\u{2782}',
            132 => '\u{2783}',
            133 => '\u{2784}',
            134 => '\u{2785}',
            135 => '\u{2786}',
            136 => '\u{2787}',
            137 => '\u{2788}',
            138 => '\u{2789}',
            139 => '\u{1f10c}',
            140 => '\u{278a}',
            141 => '\u{278b}',
            142 => '\u{278c}',
            143 => '\u{278d}',
            144 => '\u{278e}',
            145 => '\u{278f}',
            146 => '\u{2790}',
            147 => '\u{2791}',
            148 => '\u{2792}',
            149 => '\u{2793}',
            150 => '\u{1f662}',
            151 => '\u{1f660}',
            152 => '\u{1f661}',
            153 => '\u{1f663}',
            154 => '\u{1f666}',
            155 => '\u{1f664}',
            156 => '\u{1f665}',
            157 => '\u{1f667}',
            158 => '\u{2219}',
            159 => '\u{2022}',
            160 => '\u{2b1d}',
            161 => '\u{2b58}',
            162 => '\u{1f786}',
            163 => '\u{1f788}',
            164 => '\u{1f78a}',
            165 => '\u{1f78b}',
            166 => '\u{1f53f}',
            167 => '\u{25aa}',
            168 => '\u{1f78e}',
            169 => '\u{1f7c0}',
            170 => '\u{1f7c1}',
            171 => '\u{2605}',
            172 => '\u{1f7cb}',
            173 => '\u{1f7cf}',
            174 => '\u{1f7d3}',
            175 => '\u{1f7d1}',
            176 => '\u{2bd0}',
            177 => '\u{2316}',
            178 => '\u{2bce}',
            179 => '\u{2bcf}',
            180 => '\u{2bd1}',
            181 => '\u{272a}',
            182 => '\u{2730}',
            183 => '\u{1f550}',
            184 => '\u{1f551}',
            185 => '\u{1f552}',
            186 => '\u{1f553}',
            187 => '\u{1f554}',
            188 => '\u{1f555}',
            189 => '\u{1f556}',
            190 => '\u{1f557}',
            191 => '\u{1f558}',
            192 => '\u{1f559}',
            193 => '\u{1f55a}',
            194 => '\u{1f55b}',
            195 => '\u{2bb0}',
            196 => '\u{2bb1}',
            197 => '\u{2bb2}',
            198 => '\u{2bb3}',
            199 => '\u{2bb4}',
            200 => '\u{2bb5}',
            201 => '\u{2bb6}',
            202 => '\u{2bb7}',
            203 => '\u{1f66a}',
            204 => '\u{1f66b}',
            205 => '\u{1f655}',
            206 => '\u{1f654}',
            207 => '\u{1f657}',
            208 => '\u{1f656}',
            209 => '\u{1f650}',
            210 => '\u{1f651}',
            211 => '\u{1f652}',
            212 => '\u{1f653}',
            213 => '\u{232b}',
            214 => '\u{2326}',
            215 => '\u{2b98}',
            216 => '\u{2b9a}',
            217 => '\u{2b99}',
            218 => '\u{2b9b}',
            219 => '\u{2b88}',
            220 => '\u{2b8a}',
            221 => '\u{2b89}',
            222 => '\u{2b8b}',
            223 => '\u{1f868}',
            224 => '\u{1f86a}',
            225 => '\u{1f869}',
            226 => '\u{1f86b}',
            227 => '\u{1f86c}',
            228 => '\u{1f86d}',
            229 => '\u{1f86f}',
            230 => '\u{1f86e}',
            231 => '\u{1f878}',
            232 => '\u{1f87a}',
            233 => '\u{1f879}',
            234 => '\u{1f87b}',
            235 => '\u{1f87c}',
            236 => '\u{1f87d}',
            237 => '\u{1f87f}',
            238 => '\u{1f87e}',
            239 => '\u{21e6}',
            240 => '\u{21e8}',
            241 => '\u{21e7}',
            242 => '\u{21e9}',
            243 => '\u{2b04}',
            244 => '\u{21f3}',
            245 => '\u{2b01}',
            246 => '\u{2b00}',
            247 => '\u{2b03}',
            248 => '\u{2b02}',
            249 => '\u{1f8ac}',
            250 => '\u{1f8ad}',
            251 => '\u{1f5f6}',
            252 => '\u{2713}',
            253 => '\u{1f5f7}',
            254 => '\u{1f5f9}',
            255 => '\u{229e}', // similar
            x => panic!("bad wingding: {}", x),
        }
    };

    data.iter().copied().map(decode_byte).collect::<String>()
}
